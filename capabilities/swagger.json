{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API Endpoint for AlgoD Operations.",
    "title": "Algod REST API.",
    "contact": {
      "email": "contact@algorand.com"
    },
    "version": "0.0.1"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/health": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Returns OK if healthy.",
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "OK."
          },
          "401": {
            "description": "Invalid API Token"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Return metrics about algod functioning.",
        "operationId": "Metrics",
        "responses": {
          "200": {
            "description": "text with \\#-comments and key:value lines"
          },
          "404": {
            "description": "metrics were compiled out"
          }
        }
      }
    },
    "/swagger.json": {
      "get": {
        "description": "Returns the entire swagger spec in json.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Gets the current swagger spec.",
        "operationId": "SwaggerJSON",
        "responses": {
          "200": {
            "description": "The current swagger spec",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/account/{address}": {
      "get": {
        "description": "Given a specific account public key, this call returns the accounts status, balance and spendable amounts",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get account information.",
        "operationId": "AccountInformation",
        "parameters": [
          {
            "pattern": "[A-Z0-9]{58}",
            "type": "string",
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AccountInformationResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/account/{address}/transaction/{txid}": {
      "get": {
        "description": "Given a wallet address and a transaction id, it returns the confirmed transaction information. This call scans up to \u003cCurrentProtocol\u003e.MaxTxnLife blocks in the past.\n",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a specific confirmed transaction.",
        "operationId": "TransactionInformation",
        "parameters": [
          {
            "pattern": "[A-Z0-9]{58}",
            "type": "string",
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "pattern": "[A-Z0-9]+",
            "type": "string",
            "description": "A transaction id",
            "name": "txid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid API Token"
          },
          "404": {
            "description": "Transaction Not Found",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/account/{address}/transactions": {
      "get": {
        "description": "Returns the list of confirmed transactions between within a date range. This call is available only when the indexer is running.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a list of confirmed transactions.",
        "operationId": "Transactions",
        "parameters": [
          {
            "pattern": "[A-Z0-9]{58}",
            "type": "string",
            "description": "An account public key",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "description": "Do not fetch any transactions before this round.",
            "name": "firstRound",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "description": "Do not fetch any transactions after this round.",
            "name": "lastRound",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "description": "Do not fetch any transactions before this date. (enabled only with indexer)",
            "name": "fromDate",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "description": "Do not fetch any transactions after this date. (enabled only with indexer)",
            "name": "toDate",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "maximum transactions to show (default to 100)",
            "name": "max",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionsResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/block/{round}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get the block for the given round.",
        "operationId": "GetBlock",
        "parameters": [
          {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "description": "The round from which to fetch block information.",
            "name": "round",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BlockResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/ledger/supply": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get the current supply reported by the ledger.",
        "operationId": "GetSupply",
        "responses": {
          "200": {
            "$ref": "#/responses/SupplyResponse"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/status": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Gets the current node status.",
        "operationId": "GetStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/StatusResponse"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/status/wait-for-block-after/{round}/": {
      "get": {
        "description": "Waits for a block to appear after round {round} and returns the node's status at the time.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Gets the node status after waiting for the given round.",
        "operationId": "WaitForBlock",
        "parameters": [
          {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "description": "The round to wait until returning status",
            "name": "round",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/StatusResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/transaction/{txid}": {
      "get": {
        "description": "Returns the transaction information of the given txid. Works only if the indexer is enabled.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get an information of a single transaction.",
        "operationId": "Transaction",
        "parameters": [
          {
            "pattern": "[A-Z0-9]+",
            "type": "string",
            "description": "A transaction id",
            "name": "txid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid API Token"
          },
          "404": {
            "description": "Transaction Not Found",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/transactions": {
      "post": {
        "consumes": [
          "application/x-binary"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Broadcasts a raw transaction to the network.",
        "operationId": "RawTransaction",
        "parameters": [
          {
            "description": "The byte encoded signed transaction to broadcast to network",
            "name": "rawtxn",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionIDResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/transactions/fee": {
      "get": {
        "description": "Suggested Fee is returned in units of micro-Algos per byte. Suggested Fee may fall to zero but submitted transactions must still have a fee of at least MinTxnFee for the current network protocol.\n",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get the suggested fee",
        "operationId": "SuggestedFee",
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionFeeResponse"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/transactions/params": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get parameters for constructing a new transaction",
        "operationId": "TransactionParams",
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionParamsResponse"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/transactions/pending": {
      "get": {
        "description": "Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool.",
        "operationId": "GetPendingTransactions",
        "parameters": [
          {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "description": "Truncated number of transactions to display. If max=0, returns all pending txns.",
            "name": "max",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PendingTransactionsResponse"
          },
          "401": {
            "description": "Invalid API Token"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/v1/transactions/pending/{txid}": {
      "get": {
        "description": "Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round \u003e 0) - transaction still in the pool (committed round = 0, pool error = \"\") - transaction removed from pool due to error (committed round = 0, pool error != \"\")\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Get a specific pending transaction.",
        "operationId": "PendingTransactionInformation",
        "parameters": [
          {
            "pattern": "[A-Z0-9]+",
            "type": "string",
            "description": "A transaction id",
            "name": "txid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TransactionResponse"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid API Token"
          },
          "404": {
            "description": "Transaction Not Found",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error"
          }
        }
      }
    },
    "/versions": {
      "get": {
        "description": "Retrieves the current version",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "operationId": "GetVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/VersionsResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "description": "Account Description",
      "type": "object",
      "required": [
        "round",
        "address",
        "amount",
        "pendingrewards",
        "amountwithoutpendingrewards",
        "rewards",
        "status"
      ],
      "properties": {
        "address": {
          "description": "Address indicates the account public key",
          "type": "string",
          "x-go-name": "Address"
        },
        "amount": {
          "description": "Amount indicates the total number of MicroAlgos in the account",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Amount"
        },
        "amountwithoutpendingrewards": {
          "description": "AmountWithoutPendingRewards specifies the amount of MicroAlgos in\nthe account, without the pending rewards.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AmountWithoutPendingRewards"
        },
        "pendingrewards": {
          "description": "PendingRewards specifies the amount of MicroAlgos of pending\nrewards in this account.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PendingRewards"
        },
        "rewards": {
          "description": "Rewards indicates the total rewards of MicroAlgos the account has recieved",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Rewards"
        },
        "round": {
          "description": "Round indicates the round for which this information is relevant",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Round"
        },
        "status": {
          "description": "Status indicates the delegation status of the account's MicroAlgos\nOffline - indicates that the associated account is delegated.\nOnline  - indicates that the associated account used as part of the delegation pool.\nNotParticipating - indicates that the associated account is neither a delegator nor a delegate.",
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    },
    "Block": {
      "description": "Block contains a block information",
      "type": "object",
      "required": [
        "currentProtocol",
        "nextProtocol",
        "nextProtocolApprovals",
        "nextProtocolVoteBefore",
        "nextProtocolSwitchOn",
        "upgradePropose",
        "upgradeApprove",
        "hash",
        "previousBlockHash",
        "seed",
        "proposer",
        "round",
        "period",
        "txnRoot",
        "timestamp"
      ],
      "properties": {
        "currentProtocol": {
          "description": "CurrentProtocol is a string that represents the current protocol",
          "type": "string",
          "x-go-name": "CurrentProtocol"
        },
        "frac": {
          "description": "The number of leftover MicroAlgos after the distribution of RewardsRate/rewardUnits\nMicroAlgos for every reward unit in the next round.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "RewardsResidue"
        },
        "hash": {
          "description": "Hash is the current block hash",
          "type": "string",
          "x-go-name": "Hash"
        },
        "nextProtocol": {
          "description": "NextProtocol is a string that represents the next proposed protocol",
          "type": "string",
          "x-go-name": "NextProtocol"
        },
        "nextProtocolApprovals": {
          "description": "NextProtocolApprovals is the number of blocks which approved the protocol upgrade",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "NextProtocolApprovals"
        },
        "nextProtocolSwitchOn": {
          "description": "NextProtocolSwitchOn is the round on which the protocol upgrade will take effect",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "NextProtocolSwitchOn"
        },
        "nextProtocolVoteBefore": {
          "description": "NextProtocolVoteBefore is the deadline round for this protocol upgrade (No votes will be consider after this round)",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "NextProtocolVoteBefore"
        },
        "period": {
          "description": "Period is the period on which the block was confirmed",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Period"
        },
        "previousBlockHash": {
          "description": "PreviousBlockHash is the previous block hash",
          "type": "string",
          "x-go-name": "PreviousBlockHash"
        },
        "proposer": {
          "description": "Proposer is the address of this block proposer",
          "type": "string",
          "x-go-name": "Proposer"
        },
        "rate": {
          "description": "The number of new MicroAlgos added to the participation stake from rewards at the next round.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "RewardsRate"
        },
        "reward": {
          "description": "RewardsLevel specifies how many rewards, in MicroAlgos,\nhave been distributed to each config.Protocol.RewardUnit\nof MicroAlgos since genesis.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "RewardsLevel"
        },
        "round": {
          "description": "Round is the current round on which this block was appended to the chain",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Round"
        },
        "seed": {
          "description": "Seed is the sortition seed",
          "type": "string",
          "x-go-name": "Seed"
        },
        "timestamp": {
          "description": "TimeStamp in seconds since epoch",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timestamp"
        },
        "txnRoot": {
          "description": "TransactionsRoot authenticates the set of transactions appearing in the block.\nMore specifically, it's the root of a merkle tree whose leaves are the block's Txids, in lexicographic order.\nFor the empty block, it's 0.\nNote that the TxnRoot does not authenticate the signatures on the transactions, only the transactions themselves.\nTwo blocks with the same transactions but in a different order and with different signatures will have the same TxnRoot.",
          "type": "string",
          "x-go-name": "TransactionsRoot"
        },
        "txns": {
          "$ref": "#/definitions/TransactionList"
        },
        "upgradeApprove": {
          "description": "UpgradeApprove indicates a yes vote for the current proposal",
          "type": "boolean",
          "x-go-name": "UpgradeApprove"
        },
        "upgradePropose": {
          "description": "UpgradePropose indicates a proposed upgrade",
          "type": "string",
          "x-go-name": "UpgradePropose"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    },
    "NodeStatus": {
      "description": "NodeStatus contains the information about a node status",
      "type": "object",
      "required": [
        "lastRound",
        "lastConsensusVersion",
        "nextConsensusVersion",
        "nextConsensusVersionRound",
        "nextConsensusVersionSupported",
        "timeSinceLastRound",
        "catchupTime"
      ],
      "properties": {
        "catchupTime": {
          "description": "CatchupTime in nanoseconds",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CatchupTime"
        },
        "lastConsensusVersion": {
          "description": "LastVersion indicates the last consensus version supported",
          "type": "string",
          "x-go-name": "LastVersion"
        },
        "lastRound": {
          "description": "LastRound indicates the last round seen",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "LastRound"
        },
        "nextConsensusVersion": {
          "description": "NextVersion of consensus protocol to use",
          "type": "string",
          "x-go-name": "NextVersion"
        },
        "nextConsensusVersionRound": {
          "description": "NextVersionRound is the round at which the next consensus version will apply",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "NextVersionRound"
        },
        "nextConsensusVersionSupported": {
          "description": "NextVersionSupported indicates whether the next consensus version is supported by this node",
          "type": "boolean",
          "x-go-name": "NextVersionSupported"
        },
        "timeSinceLastRound": {
          "description": "TimeSinceLastRound in nanoseconds",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeSinceLastRound"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    },
    "PaymentTransactionType": {
      "description": "PaymentTransactionType contains the additional fields for a payment Transaction",
      "type": "object",
      "required": [
        "to",
        "amount"
      ],
      "properties": {
        "amount": {
          "description": "Amount is the amount of MicroAlgos intended to be transferred",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Amount"
        },
        "close": {
          "description": "CloseRemainderTo is the address the sender closed to",
          "type": "string",
          "x-go-name": "CloseRemainderTo"
        },
        "closeamount": {
          "description": "CloseAmount is the amount sent to CloseRemainderTo, for committed transaction",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CloseAmount"
        },
        "closerewards": {
          "description": "CloseRewards is the amount of pending rewards applied to the CloseRemainderTo\naccount as part of this transaction.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CloseRewards"
        },
        "to": {
          "description": "To is the receiver's address",
          "type": "string",
          "x-go-name": "To"
        },
        "torewards": {
          "description": "ToRewards is the amount of pending rewards applied to the To account\nas part of this transaction.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ToRewards"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    },
    "PendingTransactions": {
      "description": "PendingTransactions represents a potentially truncated list of transactions currently in the\nnode's transaction pool.",
      "type": "object",
      "required": [
        "truncatedTxns",
        "totalTxns"
      ],
      "properties": {
        "totalTxns": {
          "description": "TotalTxns",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalTxns"
        },
        "truncatedTxns": {
          "$ref": "#/definitions/TransactionList"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    },
    "Supply": {
      "description": "Supply represents the current supply of MicroAlgos in the system",
      "type": "object",
      "required": [
        "round",
        "totalMoney",
        "onlineMoney"
      ],
      "properties": {
        "onlineMoney": {
          "description": "OnlineMoney",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "OnlineMoney"
        },
        "round": {
          "description": "Round",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Round"
        },
        "totalMoney": {
          "description": "TotalMoney",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalMoney"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    },
    "Transaction": {
      "description": "Transaction contains all fields common to all transactions and serves as an envelope to all transactions\ntype",
      "type": "object",
      "required": [
        "type",
        "tx",
        "from",
        "fee",
        "first-round",
        "last-round",
        "genesisID",
        "genesishashb64"
      ],
      "properties": {
        "fee": {
          "description": "Fee is the transaction fee",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Fee"
        },
        "first-round": {
          "description": "FirstRound indicates the first valid round for this transaction",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FirstRound"
        },
        "from": {
          "description": "From is the sender's address",
          "type": "string",
          "x-go-name": "From"
        },
        "fromrewards": {
          "description": "FromRewards is the amount of pending rewards applied to the From\naccount as part of this transaction.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FromRewards"
        },
        "genesisID": {
          "description": "Genesis ID",
          "type": "string",
          "x-go-name": "GenesisID"
        },
        "genesishashb64": {
          "description": "Genesis hash",
          "type": "string",
          "format": "binary",
          "x-go-name": "GenesisHash"
        },
        "last-round": {
          "description": "LastRound indicates the last valid round for this transaction",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "LastRound"
        },
        "noteb64": {
          "description": "Note is a free form data",
          "type": "string",
          "format": "binary",
          "x-go-name": "Note"
        },
        "payment": {
          "$ref": "#/definitions/PaymentTransactionType"
        },
        "poolerror": {
          "description": "PoolError indicates the transaction was evicted from this node's transaction\npool (if non-empty).  A non-empty PoolError does not guarantee that the\ntransaction will never be committed; other nodes may not have evicted the\ntransaction and may attempt to commit it in the future.",
          "type": "string",
          "x-go-name": "PoolError"
        },
        "round": {
          "description": "ConfirmedRound indicates the block number this transaction appeared in",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ConfirmedRound"
        },
        "tx": {
          "description": "TxID is the transaction ID",
          "type": "string",
          "x-go-name": "TxID"
        },
        "type": {
          "$ref": "#/definitions/TxType"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    },
    "TransactionFee": {
      "description": "TransactionFee contains the suggested fee",
      "type": "object",
      "required": [
        "fee"
      ],
      "properties": {
        "fee": {
          "description": "Fee is transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Fee"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    },
    "TransactionList": {
      "description": "TransactionList contains a list of transactions",
      "type": "object",
      "required": [
        "transactions"
      ],
      "properties": {
        "transactions": {
          "description": "TransactionList is a list of transactions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          },
          "x-go-name": "Transactions"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    },
    "TransactionParams": {
      "description": "TransactionParams contains the parameters that help a client construct\na new transaction.",
      "type": "object",
      "required": [
        "fee",
        "genesisID",
        "genesishashb64",
        "lastRound",
        "consensusVersion"
      ],
      "properties": {
        "consensusVersion": {
          "description": "ConsensusVersion indicates the consensus protocol version\nas of LastRound.",
          "type": "string",
          "x-go-name": "ConsensusVersion"
        },
        "fee": {
          "description": "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Fee"
        },
        "genesisID": {
          "description": "Genesis ID",
          "type": "string",
          "x-go-name": "GenesisID"
        },
        "genesishashb64": {
          "description": "Genesis hash",
          "type": "string",
          "format": "binary",
          "x-go-name": "GenesisHash"
        },
        "lastRound": {
          "description": "LastRound indicates the last round seen",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "LastRound"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    },
    "TxType": {
      "description": "TxType is the type of the transaction written to the ledger",
      "type": "string",
      "x-go-package": "github.com/algorand/go-algorand/protocol"
    },
    "Version": {
      "description": "Note that we annotate this as a model so that legacy clients\ncan directly import a swagger generated Version model.",
      "type": "object",
      "title": "Version contains the current algod version.",
      "required": [
        "versions",
        "genesis_id",
        "genesis_hash_b64"
      ],
      "properties": {
        "genesis_hash_b64": {
          "type": "string",
          "format": "binary",
          "x-go-name": "GenesisHash"
        },
        "genesis_id": {
          "type": "string",
          "x-go-name": "GenesisID"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Versions"
        }
      },
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/common"
    },
    "transactionID": {
      "description": "TransactionID Description",
      "type": "object",
      "required": [
        "txId"
      ],
      "properties": {
        "txId": {
          "description": "TxId is the string encoding of the transaction hash",
          "type": "string",
          "x-go-name": "TxID"
        }
      },
      "x-go-name": "TransactionID",
      "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/server/v1/handlers"
    }
  },
  "responses": {
    "AccountInformationResponse": {
      "description": "AccountInformationResponse contains an account information",
      "schema": {
        "$ref": "#/definitions/Account"
      }
    },
    "BlockResponse": {
      "description": "BlockResponse contains block information",
      "schema": {
        "$ref": "#/definitions/Block"
      }
    },
    "PendingTransactionsResponse": {
      "description": "PendingTransactionsResponse contains a (potentially truncated) list of transactions and\nthe total number of transactions currently in the pool.",
      "schema": {
        "$ref": "#/definitions/PendingTransactions"
      }
    },
    "StatusResponse": {
      "description": "StatusResponse contains the node's status information",
      "schema": {
        "$ref": "#/definitions/NodeStatus"
      }
    },
    "SupplyResponse": {
      "description": "SupplyResponse contains the ledger supply information",
      "schema": {
        "$ref": "#/definitions/Supply"
      }
    },
    "TransactionFeeResponse": {
      "description": "TransactionFeeResponse contains a suggested fee",
      "schema": {
        "$ref": "#/definitions/TransactionFee"
      }
    },
    "TransactionIDResponse": {
      "description": "TransactionIDResponse contains a transaction information",
      "schema": {
        "$ref": "#/definitions/transactionID"
      }
    },
    "TransactionParamsResponse": {
      "description": "TransactionParamsResponse contains the parameters for\nconstructing a new transaction.",
      "schema": {
        "$ref": "#/definitions/TransactionParams"
      }
    },
    "TransactionResponse": {
      "description": "TransactionResponse contains a transaction information",
      "schema": {
        "$ref": "#/definitions/Transaction"
      }
    },
    "TransactionsResponse": {
      "description": "TransactionsResponse contains a list of transactions",
      "schema": {
        "$ref": "#/definitions/TransactionList"
      }
    },
    "VersionsResponse": {
      "description": "VersionsResponse is the response to 'GET /versions'",
      "schema": {
        "$ref": "#/definitions/Version"
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "description": "Generated header parameter. This token can be generated using the Goal command line tool. Example value ='b7e384d0317b8050ce45900a94a1931e28540e1f69b2d242b424659c341b4697'",
      "type": "apiKey",
      "name": "X-Algo-API-Token",
      "in": "header",
      "x-example": "b7e384d0317b8050ce45900a94a1931e28540e1f69b2d242b424659c341b4697"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ]
}